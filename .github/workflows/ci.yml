name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    # Don't set up Python 3.12, use system default Python to match python3-tdb package
    - name: Setup
      run: |
        set -e  # Exit on any error
        echo "Running CI setup script..."
        scripts/setup_ci.sh
        echo "Setup completed successfully"

    - name: Run Tests
      run: |
        set -e  # Exit on any error
        echo "Running test script..."
        scripts/run_tests.sh
        echo "All tests completed successfully"

  docker-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Initialize submodules
      run: |
        git submodule update --init --recursive

    - name: Build Docker image
      run: |
        docker build -t udpproxy-test -f docker/Dockerfile .

    - name: Test Docker container
      run: |
        # Test that the binary exists and is executable
        docker run --rm --entrypoint=/bin/bash udpproxy-test -c "ls -la /app/udpproxy && test -x /app/udpproxy && echo '/app/udpproxy is executable'"

        # Create a volume for persistent data as shown in README
        docker volume create udpproxy-test-data

        # Initialize the database in the volume (as shown in README)
        docker run --rm -v udpproxy-test-data:/app/data udpproxy-test keydb.py initialise

        # Add a test user to the database (as shown in README)
        docker run --rm -v udpproxy-test-data:/app/data udpproxy-test keydb.py add 10001 10002 'TestUser' TestPass123

        # Test that the container runs udpproxy and creates proxy.log
        docker run --rm --name udpproxy-test-run -v udpproxy-test-data:/app/data -d udpproxy-test
        sleep 3
        
        # Check if proxy.log is being created/filled
        if docker exec udpproxy-test-run test -f /app/data/proxy.log; then
          echo 'UDPProxy is running and proxy.log exists'
          log_size=$(docker exec udpproxy-test-run wc -c /app/data/proxy.log | cut -d' ' -f1)
          echo "proxy.log size: $log_size bytes"
          if [ "$log_size" -gt 0 ]; then
            echo 'proxy.log is being filled - UDPProxy is working correctly'
          else
            echo 'proxy.log exists but is empty'
          fi
          docker stop udpproxy-test-run
        else
          echo 'UDPProxy container failed - proxy.log not found'
          docker stop udpproxy-test-run
          exit 1
        fi

        # Cleanup
        docker volume rm udpproxy-test-data
